// src/pages/ProfilePage/ProfilePage.tsx

import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { Container, Form, Button, Alert } from 'react-bootstrap';
import { RootState, AppDispatch } from '../../store/store';
import { changePassword } from '../../store/userSlice'; // Экшен для изменения пароля
import Header from '../../components/Header/Header';
import Footer from '../../components/Footer/Footer';
import './ProfilePage.css';

const ProfilePage: React.FC = () => {
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const { user } = useSelector((state: RootState) => state.user);
  const dispatch = useDispatch<AppDispatch>();
  const navigate = useNavigate();

  // Проверка, что новый пароль совпадает с подтверждением
  const validateForm = () => {
    if (newPassword !== confirmPassword) {
      setError('Новый пароль и подтверждение пароля не совпадают.');
      return false;
    }
    return true;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Проверка на совпадение паролей
    if (!validateForm()) return;

    // Диспатчим экшен для смены пароля
    const result = await dispatch(changePassword({ currentPassword, newPassword }));

    if (changePassword.fulfilled.match(result)) {
      setSuccess('Пароль успешно изменен.');
      setError(null);
      setCurrentPassword('');
      setNewPassword('');
      setConfirmPassword('');
    } else {
      setError('Ошибка изменения пароля.');
      setSuccess(null);
    }
  };

  return (
    <Container fluid className="d-flex justify-content-center align-items-center min-vh-100">
      <Header />
      <div className="profile-container p-4 bg-light rounded shadow-lg">
        <h2 className="text-center">Личный кабинет</h2>

        {/* Если есть ошибка, отображаем Alert */}
        {error && <Alert variant="danger">{error}</Alert>}

        {/* Если операция успешна, показываем успешное сообщение */}
        {success && <Alert variant="success">{success}</Alert>}

        {/* Форма смены пароля */}
        <Form onSubmit={handleSubmit}>
          <Form.Group controlId="currentPassword" className="mb-3">
            <Form.Label>Текущий пароль</Form.Label>
            <Form.Control
              type="password"
              placeholder="Введите текущий пароль"
              value={currentPassword}
              onChange={(e) => setCurrentPassword(e.target.value)}
            />
          </Form.Group>

          <Form.Group controlId="newPassword" className="mb-3">
            <Form.Label>Новый пароль</Form.Label>
            <Form.Control
              type="password"
              placeholder="Введите новый пароль"
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
            />
          </Form.Group>

          <Form.Group controlId="confirmPassword" className="mb-3">
            <Form.Label>Подтвердите новый пароль</Form.Label>
            <Form.Control
              type="password"
              placeholder="Подтвердите новый пароль"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
            />
          </Form.Group>

          <Button variant="primary" type="submit" className="w-100" disabled={false}>
            Сменить пароль
          </Button>
        </Form>
      </div>
      <Footer />
    </Container>
  );
};

export default ProfilePage;
